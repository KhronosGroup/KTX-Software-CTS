{
    "description": "Test encode command with unsupported formats.",
    "command": "ktx encode --testrun --codec ${codec} input/ktx2/valid_${format}_2D.ktx2 output/encode/encode_error_format/output_${format}_2D.ktx",
    "status": 1,
    "stderr": "golden/encode/encode_error_format/common.err.txt",
    "args": {
        "codec": [
            "basis-lz",
            "uastc"
        ],
        "format": [
            "A1R5G5B5_UNORM_PACK16",
            "A2B10G10R10_SINT_PACK32",
            "A2B10G10R10_UINT_PACK32",
            "A2B10G10R10_UNORM_PACK32",
            "A2R10G10B10_SINT_PACK32",
            "A2R10G10B10_UINT_PACK32",
            "A2R10G10B10_UNORM_PACK32",
            "A4B4G4R4_UNORM_PACK16",
            "A4R4G4B4_UNORM_PACK16",
            "ASTC_10x10_SRGB_BLOCK",
            "ASTC_10x10_UNORM_BLOCK",
            "ASTC_10x5_SRGB_BLOCK",
            "ASTC_10x5_UNORM_BLOCK",
            "ASTC_10x6_SRGB_BLOCK",
            "ASTC_10x6_UNORM_BLOCK",
            "ASTC_10x8_SRGB_BLOCK",
            "ASTC_10x8_UNORM_BLOCK",
            "ASTC_12x10_SRGB_BLOCK",
            "ASTC_12x10_UNORM_BLOCK",
            "ASTC_12x12_SRGB_BLOCK",
            "ASTC_12x12_UNORM_BLOCK",
            "ASTC_4x4_SRGB_BLOCK",
            "ASTC_4x4_UNORM_BLOCK",
            "ASTC_5x4_SRGB_BLOCK",
            "ASTC_5x4_UNORM_BLOCK",
            "ASTC_5x5_SRGB_BLOCK",
            "ASTC_5x5_UNORM_BLOCK",
            "ASTC_6x5_SRGB_BLOCK",
            "ASTC_6x5_UNORM_BLOCK",
            "ASTC_6x6_SRGB_BLOCK",
            "ASTC_6x6_UNORM_BLOCK",
            "ASTC_8x5_SRGB_BLOCK",
            "ASTC_8x5_UNORM_BLOCK",
            "ASTC_8x6_SRGB_BLOCK",
            "ASTC_8x6_UNORM_BLOCK",
            "ASTC_8x8_SRGB_BLOCK",
            "ASTC_8x8_UNORM_BLOCK",
            "B10G11R11_UFLOAT_PACK32",
            "B4G4R4A4_UNORM_PACK16",
            "B5G5R5A1_UNORM_PACK16",
            "B5G6R5_UNORM_PACK16",
            "B8G8R8A8_SINT",
            "B8G8R8A8_SRGB",
            "B8G8R8A8_UINT",
            "B8G8R8A8_UNORM",
            "B8G8R8_SINT",
            "B8G8R8_SRGB",
            "B8G8R8_UINT",
            "B8G8R8_UNORM",
            "D16_UNORM",
            "D16_UNORM_S8_UINT",
            "D24_UNORM_S8_UINT",
            "D32_SFLOAT",
            "D32_SFLOAT_S8_UINT",
            "E5B9G9R9_UFLOAT_PACK32",
            "R16G16B16A16_SFLOAT",
            "R16G16B16A16_SINT",
            "R16G16B16A16_UINT",
            "R16G16B16A16_UNORM",
            "R16G16B16_SFLOAT",
            "R16G16B16_SINT",
            "R16G16B16_UINT",
            "R16G16B16_UNORM",
            "R16G16_SFLOAT",
            "R16G16_SINT",
            "R16G16_UINT",
            "R16G16_UNORM",
            "R16_SFLOAT",
            "R16_SINT",
            "R16_UINT",
            "R16_UNORM",
            "R32G32B32A32_SFLOAT",
            "R32G32B32A32_UINT",
            "R32G32B32_SFLOAT",
            "R32G32B32_UINT",
            "R32G32_SFLOAT",
            "R32G32_UINT",
            "R32_SFLOAT",
            "R32_UINT",
            "R4G4B4A4_UNORM_PACK16",
            "R4G4_UNORM_PACK8",
            "R5G5B5A1_UNORM_PACK16",
            "R5G6B5_UNORM_PACK16",
            "R8G8B8A8_SINT",
            "R8G8B8A8_UINT",
            "R8G8B8_SINT",
            "R8G8B8_UINT",
            "R8G8_SINT",
            "R8G8_UINT",
            "R8_SINT",
            "R8_UINT",
            "S8_UINT",
            "X8_D24_UNORM_PACK32"
        ]
    }
}
